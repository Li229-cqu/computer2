】】from tkinter import *
from tkinter import ttk, messagebox, simpledialog
from socket import *


class ATMClient:
    def __init__(self, root):
        # 初始化客户端界面
        self.root = root
        self.root.title("ATM客户端")
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        self.root.configure(bg="#f0f2f5")

        # 网络连接相关
        self.client_socket = None  # 客户端socket对象
        self.server_ip = '2.0.0.1'  # 服务器IP地址
        self.server_port = 2525     # 服务器端口

        # 用户状态
        self.logged_in = False     # 登录状态标记
        self.current_user = None   # 当前登录用户

        # 初始化UI界面
        self.setup_ui()

    def connect_to_server(self):
        """连接到服务器方法"""
        try:
            self.client_socket = socket(AF_INET, SOCK_STREAM)
            self.client_socket.connect((self.server_ip, self.server_port))
            return True
        except Exception as e:
            messagebox.showerror("连接错误", f"连接服务器失败: {e}")
            return False

    def send_request(self, request):
        """发送请求到服务器并接收响应"""
        try:
            self.client_socket.send(request.encode())
            response = self.client_socket.recv(1024).decode()
            return response
        except Exception as e:
            messagebox.showerror("错误", f"连接错误: {e}")
            self.close_connection()
            return None

    def close_connection(self):
        """关闭服务器连接"""
        if self.client_socket:
            self.client_socket.close()
            self.client_socket = None
        self.logged_in = False
        self.current_user = None

    def handle_helo(self):
        """处理用户ID验证"""
        if not self.client_socket and not self.connect_to_server():
            return

        userid = self.entry_userid.get().strip()
        if not userid:
            self.update_feedback("用户ID不能为空")
            return

        request = f"HELO {userid}"
        response = self.send_request(request)

        if response == "500 AUTH REQUIRE":
            self.current_user = userid
            self.update_feedback("请输入密码")
            self.show_password_input()
        else:
            self.update_feedback("无效的用户ID")
            self.entry_userid.delete(0, END)

    def handle_pass(self):
        """处理密码验证"""
        password = self.entry_password.get().strip()
        if not password:
            self.update_feedback("密码不能为空")
            return

        request = f"PASS {password}"
        response = self.send_request(request)

        if response == "525 OK!":
            self.logged_in = True
            self.update_feedback("登录成功")
            self.show_main_interface()
        else:
            self.update_feedback("密码错误")
            self.entry_password.delete(0, END)

    def check_balance(self):
        """查询余额功能"""
        if not self.logged_in:
            self.update_feedback("请先登录")
            return

        response = self.send_request("BALA")
        if response.startswith("AMNT:"):
            balance = response.split(":")[1]
            self.update_feedback(f"当前余额: {balance}元")
        else:
            self.update_feedback("查询余额失败")

    def withdraw(self):
        """取款功能"""
        if not self.logged_in:
            self.update_feedback("请先登录")
            return

        amount = simpledialog.askfloat("取款", "请输入取款金额:")
        if amount is None or amount <= 0:
            return

        request = f"WDRA {amount}"
        response = self.send_request(request)

        if response == "525 OK!":
            self.update_feedback(f"成功取款 {amount}元")
        elif response == "401 ERROR!":
            self.update_feedback("取款失败，余额不足")
        else:
            self.update_feedback("取款失败")

    def logout(self):
        """退出登录功能"""
        if self.logged_in:
            response = self.send_request("BYE")
            if response == "BYE":
                self.update_feedback("已成功退出")
        self.close_connection()
        self.show_login_interface()

    # ---------- 界面相关方法 ----------
    def setup_ui(self):
        """初始化用户界面"""
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TFrame", background="#f0f2f5")
        style.configure("TLabel", background="#f0f2f5", font=("微软雅黑", 12))
        style.configure("TButton", font=("微软雅黑", 12), padding=5)
        style.configure("Header.TLabel", font=("微软雅黑", 16, "bold"))

        # 登录界面组件
        self.frame_login = ttk.Frame(self.root, padding="20")
        self.header_label = ttk.Label(self.frame_login, text="ATM系统登录", style="Header.TLabel")
        self.label_userid = ttk.Label(self.frame_login, text="用户ID:")
        self.entry_userid = ttk.Entry(self.frame_login, font=("微软雅黑", 12))
        self.button_helo = ttk.Button(self.frame_login, text="提交", command=self.handle_helo, style="Accent.TButton")
        self.label_feedback = ttk.Label(self.frame_login, text="", foreground="red")

        # 密码输入组件(初始隐藏)
        self.label_password = ttk.Label(self.frame_login, text="密码:")
        self.entry_password = ttk.Entry(self.frame_login, show="*", font=("微软雅黑", 12))
        self.button_pass = ttk.Button(self.frame_login, text="登录", command=self.handle_pass, style="Accent.TButton")

        # 主操作界面组件(初始隐藏)
        self.frame_main = ttk.Frame(self.root, padding="20")
        self.welcome_label = ttk.Label(self.frame_main, text="", font=("微软雅黑", 14), style="Header.TLabel")
        self.button_balance = ttk.Button(self.frame_main, text="查询余额", command=self.check_balance)
        self.button_withdraw = ttk.Button(self.frame_main, text="取款", command=self.withdraw)
        self.button_logout = ttk.Button(self.frame_main, text="退出", command=self.logout)
        self.label_main_feedback = ttk.Label(self.frame_main, text="", foreground="blue")

        # 按钮样式配置
        style.configure("Accent.TButton", background="#1890ff", foreground="white")
        style.map("Accent.TButton",
                  background=[("active", "#40a9ff"), ("disabled", "#d9d9d9")])

        # 登录界面布局
        self.header_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        self.label_userid.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.entry_userid.grid(row=1, column=1, padx=5, pady=5, ipady=5)
        self.button_helo.grid(row=2, column=0, columnspan=2, pady=10, ipady=5)
        self.label_feedback.grid(row=3, column=0, columnspan=2)

        # 默认显示登录界面
        self.frame_login.pack()

    def show_password_input(self):
        """显示密码输入界面"""
        self.label_userid.grid_remove()
        self.entry_userid.grid_remove()
        self.button_helo.grid_remove()

        self.label_password.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.entry_password.grid(row=1, column=1, padx=5, pady=5, ipady=5)
        self.button_pass.grid(row=2, column=0, columnspan=2, pady=10, ipady=5)
        self.entry_password.focus_set()

    def show_main_interface(self):
        """显示主操作界面"""
        self.frame_login.pack_forget()
        self.frame_main.pack()

        self.welcome_label.config(text=f"欢迎, {self.current_user}")
        self.welcome_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))

        self.button_balance.grid(row=1, column=0, padx=10, pady=10, ipady=10)
        self.button_withdraw.grid(row=1, column=1, padx=10, pady=10, ipady=10)
        self.button_logout.grid(row=2, column=0, columnspan=2, pady=10, ipady=5)
        self.label_main_feedback.grid(row=3, column=0, columnspan=2)

    def show_login_interface(self):
        """返回登录界面"""
        self.frame_main.pack_forget()
        self.frame_login.pack()

        # 重置界面状态
        self.label_userid.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.entry_userid.grid(row=1, column=1, padx=5, pady=5, ipady=5)
        self.button_helo.grid(row=2, column=0, columnspan=2, pady=10, ipady=5)
        self.label_feedback.grid(row=3, column=0, columnspan=2)

        self.label_password.grid_remove()
        self.entry_password.grid_remove()
        self.button_pass.grid_remove()

        self.entry_userid.delete(0, END)
        self.entry_password.delete(0, END)
        self.update_feedback("")

    def update_feedback(self, message):
        """更新状态提示信息"""
        if self.logged_in:
            self.label_main_feedback.config(text=message)
        else:
            self.label_feedback.config(text=message)


# 程序入口
if __name__ == "__main__":
    root = Tk()
    app = ATMClient(root)
    root.mainloop()
